{
    "django": {
        "expressions": {
            "comparisons": {
                "equal-to": "\n`varX` is equal to `varY`\n",
                "greater-than-or-equal": "\n2 is greater than or equal to 1\n\n\n\n2 is greater than or equal to 2\n",
                "greater-than": "\n2 is greater than 1\n",
                "less-than-or-equal": "\n1 is less than or equal to 2\n\n\n\n1 is less than or equal to 1\n",
                "less-than": "\n1 is less than 2\n",
                "not-equal-to": "\n`varX` is not equal to `varY`\n"
            },
            "reserved-words": {
                "class": "class",
                "function": "function",
                "in": "in",
                "var": "var",
                "with": "with"
            }
        },
        "filters": {
            "escape": {
                "default": "<html>",
                "double-escape": "<html>"
            },
            "filesizeformat": {
                "default": ""
            },
            "first": {
                "string": "1"
            },
            "last": {
                "array-as-variable": "4",
                "string": "4"
            },
            "length": {
                "number": "0",
                "string": "4"
            },
            "lower": {
                "array": "[u&#39;my first car&#39;, u&#39;my second car&#39;, u&#39;my third car&#39;]",
                "number": "5",
                "string": "my first car"
            },
            "random": {
                "array": "9"
            },
            "upper": {
                "array": "[U&#39;MY FIRST CAR&#39;, U&#39;MY SECOND CAR&#39;, U&#39;MY THIRD CAR&#39;]",
                "number": "5",
                "string": "MY FIRST CAR"
            }
        },
        "functions": {
            "range": {
                "dot-dot-operator": ""
            }
        },
        "tags": {
            "if": {
                "true-capitalized": "True",
                "true-variable": "true",
                "true": ""
            },
            "spaceless": {
                "attributes": "<input name=\" spaceless \"  value=\"  \"  required=\"  \">",
                "div": "<div><strong>test</strong></div>",
                "pre": "<pre>\nFormatted text\n\n<strong>with empty lines\n    and tabs</strong></pre>",
                "textarea": "<textarea>\nFormatted text\n\n<strong>with empty lines\n    and tabs</strong></textarea>"
            },
            "verbatim": {
                "broken-expression": "{{ x }",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    },
    "jinja2": {
        "expressions": {
            "comparisons": {
                "equal-to": "\n`varX` is equal to `varY`\n",
                "greater-than-or-equal": "\n2 is greater than or equal to 1\n\n\n\n2 is greater than or equal to 2\n",
                "greater-than": "\n2 is greater than 1\n",
                "less-than-or-equal": "\n1 is less than or equal to 2\n\n\n\n1 is less than or equal to 1\n",
                "less-than": "\n1 is less than 2\n",
                "not-equal-to": "\n`varX` is not equal to `varY`\n"
            },
            "math": {
                "addition": "5",
                "devision": "2.0",
                "multiplication": "10",
                "power": "8",
                "subtraction": "2"
            },
            "reserved-words": {
                "class": "class",
                "function": "function",
                "in": "in",
                "var": "var",
                "with": "with"
            }
        },
        "filters": {
            "abs": {
                "negative-float": "3.14",
                "negative-integer": "3",
                "positive-float": "3.14",
                "positive-integer": "3",
                "variable": "3",
                "zero": "0"
            },
            "batch": {
                "size-and-fill": " a  b  c  |\n d  e  f  |\n g  -  -  |\n",
                "size-only": " a  b  c  |\n d  e  f  |\n g  |\n"
            },
            "capitalize": {
                "array": "[u'my first car', u'my second car', u'my third car']",
                "mixed-case": "My first car",
                "number": "5",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "center": {
                "default": "<pre>                                       x                                        </pre>",
                "width-20": "<pre>         x          </pre>"
            },
            "default": {
                "alias-d": "\"varX\" is not defined",
                "empty-string-strict": "passed string is empty",
                "empty-string": ".",
                "undefined-variable": "\"varX\" is not defined"
            },
            "dictsort": {
                "by-value": "1:f\n2:b\n3:e\n4:c\n5:a\n6:d\n",
                "case-insensitive": "A\na\nB\nb\nc\nC\n",
                "case-sensitive": "A\nB\nC\na\nb\nc\n",
                "default": "a\nb\nC\nd\nE\nf\n"
            },
            "escape": {
                "alias-e": "&lt;html&gt;",
                "default": "&lt;html&gt;",
                "double-escape": "&lt;html&gt;"
            },
            "filesizeformat": {
                "binary": "0 Bytes\n1 Byte\n2 Bytes\n10 Bytes\n100 Bytes\n1000 Bytes\n976.6 KiB\n953.7 MiB\n931.3 GiB",
                "default": "0 Bytes\n1 Byte\n2 Bytes\n10 Bytes\n100 Bytes\n1.0 kB\n1.0 MB\n1.0 GB\n1.0 TB"
            },
            "first": {
                "array": "1",
                "object": "",
                "string": "1"
            },
            "float": {
                "custom-fallback": "0.5",
                "float": "3.52",
                "force-fallback": "0.0",
                "integer": "3.0",
                "string": "3.52"
            },
            "groupby": {
                "attribute": "\nblue:\njohn jim \n\ngreen:\njames jessie \n"
            },
            "indent": {
                "custom-spacing": "one\n      two\n      three",
                "default": "one\n    two\n    three",
                "include-first-line": "      one\n      two\n      three"
            },
            "int": {
                "base-16": "19762",
                "base-8": "9",
                "custom-fallback": "5",
                "float": "3",
                "force-fallback": "0",
                "integer": "3",
                "string": "3"
            },
            "join": {
                "custom-glue": "1|2|3",
                "default": "123",
                "object": "alpha, bravo, charlie"
            },
            "last": {
                "array-as-variable": "4",
                "array": "4",
                "string": "4"
            },
            "length": {
                "array": "4",
                "object": "1",
                "string": "4"
            },
            "list": {
                "string": "t, e, m, p, l, a, t, e, "
            },
            "lower": {
                "array": "[u'my first car', u'my second car', u'my third car']",
                "number": "5",
                "string": "my first car"
            },
            "random": {
                "array": "9"
            },
            "rejectattr": {
                "attribute": "\nbravo\n",
                "default": "\nalpha\n"
            },
            "replace": {
                "count": "aaa..bccc",
                "empty": ".a.a.a.b.b.b.c.c.c.",
                "letter": "aaa...ccc",
                "number": "111...333",
                "pattern": "aaabbbccc"
            },
            "reverse": {
                "array": "\n4\n\n3\n\n2\n\n1\n",
                "string": "4321"
            },
            "round": {
                "ceil": "42.5",
                "common": "42.5",
                "default": "43.0",
                "floor": "42.5",
                "precision": "42.5"
            },
            "selectattr": {
                "attribute": "\nalpha\n\ndelta\n",
                "default": "\nbravo\n\ndelta\n"
            },
            "upper": {
                "array": "[U'MY FIRST CAR', U'MY SECOND CAR', U'MY THIRD CAR']",
                "number": "5",
                "string": "MY FIRST CAR"
            }
        },
        "functions": {
            "cycler": {
                "next-next-current": "\nodd\neven\nodd",
                "next-next-next": "\nodd\neven\nodd",
                "next-reset-next": "\nodd\nNone\nodd"
            },
            "joiner": {
                "custom-separator": "\n alpha | beta | charlie",
                "default": "\n alpha,  beta,  charlie"
            },
            "range": {
                "negative-start": "-5 -4 -3 -2 -1 0 1 2 3 4 ",
                "negative-step": "10 9 8 7 6 ",
                "start-stop-step": "5 7 9 ",
                "start-stop": "5 6 7 8 9 ",
                "stop": "0 1 2 3 4 5 6 7 8 9 "
            }
        },
        "tags": {
            "if": {
                "true-capitalized": "True",
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if im_broken }still work",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    },
    "liquid": {
        "expressions": {
            "comparisons": {
                "equal-to": "\n`varX` is equal to `varY`\n",
                "greater-than-or-equal": "\n2 is greater than or equal to 1\n\n\n\n2 is greater than or equal to 2\n",
                "greater-than": "\n2 is greater than 1\n",
                "less-than-or-equal": "\n1 is less than or equal to 2\n\n\n\n1 is less than or equal to 1\n",
                "less-than": "\n1 is less than 2\n",
                "not-equal-to": "\n`varX` is not equal to `varY`\n"
            },
            "math": {
                "addition": "2",
                "subtraction": "5"
            },
            "reserved-words": {
                "class": "class",
                "function": "function",
                "in": "in",
                "var": "var",
                "with": "with"
            }
        },
        "filters": {
            "abs": {
                "negative-float": "-3.14",
                "negative-integer": "-3",
                "positive-float": "3.14",
                "positive-integer": "3",
                "string": "-3.14",
                "variable": "-3",
                "zero": "0"
            },
            "batch": {
                "size-and-fill": "\n     a  |\n\n     b  |\n\n     c  |\n\n     d  |\n\n     e  |\n\n     f  |\n\n     g  |\n",
                "size-only": "\n     a  |\n\n     b  |\n\n     c  |\n\n     d  |\n\n     e  |\n\n     f  |\n\n     g  |\n"
            },
            "capitalize": {
                "array": "[\"my first car\", \"my second car\", \"my third car\"]",
                "mixed-case": "My first car",
                "number": "5",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "center": {
                "default": "<pre>x</pre>",
                "width-20": "<pre>x</pre>"
            },
            "default": {
                "empty-string": "."
            },
            "dump": {
                "default": "a1{\"b\"=>false}",
                "spaces": "a1{\"b\"=>false}",
                "tab": "a1{\"b\"=>false}"
            },
            "escape": {
                "alias-e": "<html>",
                "default": "&lt;html&gt;",
                "double-escape": "&amp;lt;html&amp;gt;"
            },
            "filesizeformat": {
                "binary": "0\n1\n2\n10\n100\n1000\n1000000\n1000000000\n1000000000000",
                "default": "0\n1\n2\n10\n100\n1000\n1000000\n1000000000\n1000000000000"
            },
            "float": {
                "float": "3.52",
                "integer": "3",
                "string": "3.52"
            },
            "indent": {
                "custom-spacing": "one\\ntwo\\nthree",
                "default": "one\\ntwo\\nthree",
                "include-first-line": "one\\ntwo\\nthree"
            },
            "int": {
                "base-16": "0x4d32",
                "base-8": "011",
                "float": "3.52",
                "integer": "3",
                "string": "3.52"
            },
            "join": {
                "custom-glue": "1 2 3",
                "default": "1 2 3",
                "object": "{\"name\"=>\"alpha\"}, {\"name\"=>\"bravo\"}, {\"name\"=>\"charlie\"}"
            },
            "last": {
                "array-as-variable": "4"
            },
            "length": {
                "number": "1234",
                "string": "1234"
            },
            "list": {
                "string": "template, "
            },
            "lower": {
                "array": "my first carmy Second carmy THIRD car",
                "number": "5",
                "string": "My FIRST Car"
            },
            "random": {
                "array": "123456789"
            },
            "rejectattr": {
                "attribute": "\nalpha\n\nbravo\n\ndelta\n",
                "default": "\nalpha\n\nbravo\n\ndelta\n"
            },
            "replace": {
                "count": "aaabbbccc",
                "empty": "aaabbbccc",
                "letter": "aaabbbccc",
                "number": "111222333",
                "pattern": "aaabbbccc"
            },
            "reverse": {
                "array": "\n1\n\n2\n\n3\n\n4\n",
                "number": "1234",
                "string": "1234"
            },
            "round": {
                "ceil": "42.0",
                "common": "43.0",
                "default": "43",
                "floor": "43.0",
                "precision": "43"
            },
            "selectattr": {
                "attribute": "\nalpha\n\nbravo\n\ndelta\n",
                "default": "\nalpha\n\nbravo\n\ndelta\n"
            },
            "upper": {
                "array": "my first carmy Second carmy THIRD car",
                "number": "5",
                "string": "My first CAR"
            }
        },
        "tags": {
            "if": {
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if im_broken }still work",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    },
    "nunjucks": {
        "expressions": {
            "comparisons": {
                "equal-to": "\n`varX` is equal to `varY`\n",
                "greater-than-or-equal": "\n2 is greater than or equal to 1\n\n\n\n2 is greater than or equal to 2\n",
                "greater-than": "\n2 is greater than 1\n",
                "less-than-or-equal": "\n1 is less than or equal to 2\n\n\n\n1 is less than or equal to 1\n",
                "less-than": "\n1 is less than 2\n",
                "not-equal-to": "\n`varX` is not equal to `varY`\n",
                "strict-equal-to": "\n1234 not strict equal to 1234\n",
                "strict-not-equal-to": "\n1234 is not strict equal to '1234'\n"
            },
            "math": {
                "addition": "5",
                "devision": "2",
                "multiplication": "10",
                "power": "8",
                "subtraction": "2"
            },
            "reserved-words": {
                "class": "class",
                "function": "function",
                "in": "in",
                "var": "var",
                "with": "with"
            }
        },
        "filters": {
            "abs": {
                "negative-float": "3.14",
                "negative-integer": "3",
                "positive-float": "3.14",
                "positive-integer": "3",
                "string": "3.14",
                "variable": "3",
                "zero": "0"
            },
            "batch": {
                "size-and-fill": " a  b  c  |\n d  e  f  |\n g  -  -  |\n",
                "size-only": " a  b  c  |\n d  e  f  |\n g  |\n"
            },
            "capitalize": {
                "mixed-case": "My first car",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "center": {
                "default": "<pre>                                       x                                        </pre>",
                "width-20": "<pre>         x          </pre>"
            },
            "default": {
                "alias-d": "&quot;varX&quot; is not defined",
                "empty-string-strict": "passed string is empty",
                "empty-string": ".",
                "undefined-property-bracket-notation": "&quot;x&quot; on &quot;vars&quot; is not defined",
                "undefined-property-dot-notation": "&quot;x&quot; on &quot;vars&quot; is not defined\n",
                "undefined-variable": "&quot;varX&quot; is not defined"
            },
            "dictsort": {
                "by-value": "1:f\n2:b\n3:e\n4:c\n5:a\n6:d\n",
                "case-insensitive": "A\na\nb\nB\nc\nC\n",
                "case-sensitive": "A\nB\nC\na\nb\nc\n",
                "default": "a\nb\nC\nd\nE\nf\n"
            },
            "dump": {
                "default": "[&quot;a&quot;,1,{&quot;b&quot;:false}]",
                "spaces": "[&quot;a&quot;,1,{&quot;b&quot;:false}]",
                "tab": "[&quot;a&quot;,1,{&quot;b&quot;:false}]"
            },
            "escape": {
                "alias-e": "&lt;html&gt;",
                "default": "&lt;html&gt;",
                "double-escape": "&lt;html&gt;"
            },
            "first": {
                "array": "1",
                "string": "1"
            },
            "float": {
                "custom-fallback": "0.5",
                "float": "3.52",
                "integer": "3",
                "string": "3.52"
            },
            "groupby": {
                "attribute": "\ngreen:\njames jessie \n\nblue:\njohn jim \n"
            },
            "indent": {
                "custom-spacing": "one\n      two\n      three\n",
                "default": "one\n    two\n    three\n",
                "include-first-line": "      one\n      two\n      three\n"
            },
            "int": {
                "base-16": "0",
                "base-8": "11",
                "custom-fallback": "5",
                "float": "3",
                "integer": "3",
                "string": "3"
            },
            "join": {
                "custom-glue": "1|2|3",
                "default": "123",
                "object": "alpha, bravo, charlie"
            },
            "last": {
                "array-as-variable": "4",
                "array": "4",
                "string": "4"
            },
            "length": {
                "array": "4",
                "object": "4",
                "string": "4"
            },
            "list": {
                "string": "t, e, m, p, l, a, t, e, "
            },
            "lower": {
                "string": "my first car"
            },
            "random": {
                "array": "8"
            },
            "rejectattr": {
                "default": "\nalpha\n"
            },
            "replace": {
                "count": "aaa..bccc",
                "empty": ".a.a.a.b.b.b.c.c.c.",
                "letter": "aaa...ccc",
                "number": "111...333",
                "pattern": "aaabbbccc"
            },
            "reverse": {
                "array": "\n4\n\n3\n\n2\n\n1\n",
                "string": "4321"
            },
            "round": {
                "ceil": "42.5",
                "common": "42.6",
                "default": "43",
                "floor": "42.5",
                "precision": "42.6"
            },
            "selectattr": {
                "attribute": "\nalpha\n\nbravo\n\ndelta\n",
                "default": "\nbravo\n\ndelta\n"
            },
            "upper": {
                "string": "MY FIRST CAR"
            }
        },
        "functions": {
            "cycler": {
                "next-next-current": "\nodd\neven\neven",
                "next-next-next": "\nodd\neven\nodd",
                "next-reset-next": "\nodd\n\nodd"
            },
            "joiner": {
                "custom-separator": "\n alpha | beta | charlie",
                "default": "\n alpha, beta, charlie"
            },
            "range": {
                "float-step": "5 7.5 ",
                "negative-start": "-5 -4 -3 -2 -1 0 1 2 3 4 ",
                "negative-step": "10 9 8 7 6 ",
                "start-stop-step": "5 7 9 ",
                "start-stop": "5 6 7 8 9 ",
                "stop": "0 1 2 3 4 5 6 7 8 9 "
            }
        },
        "tags": {
            "if": {
                "true-capitalized": "True",
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if im_broken }still work",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "nested-raw": "{% raw %}{{ x }{% endraw %}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    },
    "swig": {
        "expressions": {
            "comparisons": {
                "equal-to": "\n`varX` is equal to `varY`\n",
                "greater-than-or-equal": "\n2 is greater than or equal to 1\n\n\n\n2 is greater than or equal to 2\n",
                "greater-than": "\n2 is greater than 1\n",
                "less-than-or-equal": "\n1 is less than or equal to 2\n\n\n\n1 is less than or equal to 1\n",
                "less-than": "\n1 is less than 2\n",
                "not-equal-to": "\n`varX` is not equal to `varY`\n",
                "strict-equal-to": "\n1234 not strict equal to 1234\n",
                "strict-not-equal-to": "\n1234 is not strict equal to '1234'\n"
            },
            "math": {
                "addition": "5",
                "devision": "2",
                "multiplication": "10",
                "subtraction": "2"
            }
        },
        "filters": {
            "capitalize": {
                "array": "My first car,My second car,My third car",
                "mixed-case": "My first car",
                "number": "5",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "default": {
                "empty-string-strict": "passed string is empty",
                "empty-string": "passed string is empty.",
                "undefined-property-bracket-notation": "&quot;x&quot; on &quot;vars&quot; is not defined",
                "undefined-property-dot-notation": "&quot;x&quot; on &quot;vars&quot; is not defined\n",
                "undefined-variable": "&quot;varX&quot; is not defined"
            },
            "escape": {
                "alias-e": "&lt;html&gt;",
                "default": "&lt;html&gt;",
                "double-escape": "&lt;html&gt;"
            },
            "first": {
                "array": "1",
                "number": "undefined",
                "object": "1",
                "string": "1"
            },
            "join": {
                "custom-glue": "1|2|3",
                "default": "1,2,3",
                "object": "[object Object], [object Object], [object Object]"
            },
            "last": {
                "array-as-variable": "4",
                "array": "4",
                "number": "undefined",
                "object": "4",
                "string": "4"
            },
            "lower": {
                "array": "my first car,my second car,my third car",
                "number": "5",
                "string": "my first car"
            },
            "replace": {
                "empty": ".aaabbbccc",
                "letter": "aaa.bbccc",
                "pattern": ".aaabbbccc"
            },
            "reverse": {
                "array": "\n4\n\n3\n\n2\n\n1\n",
                "number": "1234",
                "object-default": "\n0: 3\n\n1: 2\n\n2: 1\n\n",
                "object-preserve-keys": "\n0: 3\n\n1: 2\n\n2: 1\n\n",
                "string": "4321"
            },
            "upper": {
                "array": "MY FIRST CAR,MY SECOND CAR,MY THIRD CAR",
                "number": "5",
                "string": "MY FIRST CAR"
            }
        },
        "tags": {
            "if": {
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if im_broken }still work{% endraw %}",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            },
            "spaceless": {
                "attributes": "<input name=\" spaceless \"  value=\"  \"  required=\"  \">",
                "div": "<div><strong>test</strong></div>",
                "pre": "<pre>\nFormatted text\n\n<strong>with empty lines\n    and tabs</strong></pre>",
                "textarea": "<textarea>\nFormatted text\n\n<strong>with empty lines\n    and tabs</strong></textarea>"
            }
        }
    },
    "twig": {
        "expressions": {
            "comparisons": {
                "ends-with": "\"Templates\" ends with \"s\"\n",
                "equal-to": "`varX` is equal to `varY`\n",
                "greater-than-or-equal": "2 is greater than or equal to 1\n\n2 is greater than or equal to 2\n",
                "greater-than": "2 is greater than 1\n",
                "less-than-or-equal": "1 is less than or equal to 2\n\n1 is less than or equal to 1\n",
                "less-than": "1 is less than 2\n",
                "matches": "`phone` is a valid phone number\n",
                "not-equal-to": "`varX` is not equal to `varY`\n",
                "starts-with": "\"Templates\" starts with \"T\"\n"
            },
            "math": {
                "addition": "5",
                "devision": "2",
                "multiplication": "10",
                "power": "8",
                "subtraction": "2"
            },
            "reserved-words": {
                "class": "class",
                "function": "function",
                "in": "in",
                "var": "var",
                "with": "with"
            }
        },
        "filters": {
            "abs": {
                "negative-float": "-3.14",
                "negative-integer": "-3",
                "positive-float": "3.14",
                "positive-integer": "3",
                "string": "3.14",
                "variable": "3",
                "zero": "0"
            },
            "batch": {
                "size-and-fill": " a  b  c  |\n d  e  f  |\n g  -  -  |\n",
                "size-only": " a  b  c  |\n d  e  f  |\n g  |\n"
            },
            "capitalize": {
                "mixed-case": "My first car",
                "number": "5",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "default": {
                "empty-string-strict": "passed string is empty",
                "empty-string": "passed string is empty.",
                "undefined-property-bracket-notation": "&quot;x&quot; on &quot;vars&quot; is not defined",
                "undefined-property-dot-notation": "&quot;x&quot; on &quot;vars&quot; is not defined\n",
                "undefined-variable": "&quot;varX&quot; is not defined"
            },
            "escape": {
                "alias-e": "&lt;html&gt;",
                "default": "&lt;html&gt;",
                "double-escape": "&amp;lt;html&amp;gt;"
            },
            "first": {
                "array": "1",
                "number": "1",
                "object": "1",
                "string": "1"
            },
            "join": {
                "custom-glue": "1|2|3",
                "default": "123",
                "object": "Array, Array, Array"
            },
            "last": {
                "array-as-variable": "4",
                "array": "4",
                "number": "4",
                "object": "4",
                "string": "4"
            },
            "length": {
                "array": "4",
                "number": "4",
                "object": "4",
                "string": "4"
            },
            "lower": {
                "number": "5",
                "string": "my first car"
            },
            "replace": {
                "count": "aaa...ccc",
                "empty": "aaabbbccc",
                "letter": "aaa...ccc",
                "number": "111...333",
                "pattern": "aaa...ccc"
            },
            "reverse": {
                "array": "4\n3\n2\n1\n",
                "number": "4321",
                "object-default": "0: c\n1: b\n2: a\n",
                "object-preserve-keys": "3: c\n2: b\n1: a\n",
                "string": "4321"
            },
            "round": {
                "ceil": "42.5",
                "common": "42.6",
                "default": "43",
                "floor": "42.5",
                "precision": "42.6"
            },
            "upper": {
                "number": "5",
                "string": "MY FIRST CAR"
            }
        },
        "functions": {
            "attribute": {
                "array": "charlie",
                "object": "alpha"
            },
            "cycle": {
                "2-items": "even\nodd\neven\nodd\neven\n",
                "3-items": "orange\nbanana\napple\norange\nbanana\n"
            },
            "max": {
                "array": "3",
                "object": "e",
                "sequence": "3"
            },
            "min": {
                "array": "1",
                "object": "a",
                "sequence": "1"
            },
            "range": {
                "dot-dot-operator": "5 6 7 8 9 10 ",
                "float-step": "5 7.5 10 ",
                "negative-start": "-5 -4 -3 -2 -1 0 1 2 3 4 5 ",
                "negative-step": "10 9 8 7 6 5 ",
                "start-stop-step": "5 7 9 ",
                "start-stop": "5 6 7 8 9 10 "
            }
        },
        "tags": {
            "if": {
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if im_broken }still work",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            },
            "spaceless": {
                "attributes": "<input name=\" spaceless \"  value=\"  \"  required=\"  \">",
                "div": "<div><strong>test</strong></div>",
                "pre": "<pre>\nFormatted text\n\n<strong>with empty lines\n    and tabs</strong></pre>",
                "textarea": "<textarea>\nFormatted text\n\n<strong>with empty lines\n    and tabs</strong></textarea>"
            },
            "verbatim": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if im_broken }still work",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    },
    "twigjs": {
        "expressions": {
            "comparisons": {
                "equal-to": "`varX` is equal to `varY`\n",
                "greater-than-or-equal": "2 is greater than or equal to 1\n\n2 is greater than or equal to 2\n",
                "greater-than": "2 is greater than 1\n",
                "less-than-or-equal": "1 is less than or equal to 2\n\n1 is less than or equal to 1\n",
                "less-than": "1 is less than 2\n",
                "not-equal-to": "`varX` is not equal to `varY`\n"
            },
            "math": {
                "addition": "5",
                "devision": "2",
                "multiplication": "10",
                "power": "8",
                "subtraction": "2"
            },
            "reserved-words": {
                "class": "class",
                "function": "function",
                "var": "var",
                "with": "with"
            }
        },
        "filters": {
            "abs": {
                "negative-float": "3.14",
                "negative-integer": "3",
                "positive-float": "3.14",
                "positive-integer": "3",
                "string": "3.14",
                "variable": "3",
                "zero": "0"
            },
            "batch": {
                "size-and-fill": " a  b  c  |\n d  e  f  |\n g  -  -  |\n",
                "size-only": " a  b  c  |\n d  e  f  |\n g  |\n"
            },
            "capitalize": {
                "array": "my first car,my Second car,my THIRD car",
                "mixed-case": "My first car",
                "number": "5",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "default": {
                "empty-string": "passed string is empty.",
                "undefined-property-bracket-notation": "\"x\" on \"vars\" is not defined",
                "undefined-property-dot-notation": "\"x\" on \"vars\" is not defined\n",
                "undefined-variable": "\"varX\" is not defined"
            },
            "escape": {
                "alias-e": "&lt;html&gt;",
                "default": "&lt;html&gt;",
                "double-escape": "&amp;lt;html&amp;gt;"
            },
            "first": {
                "array": "1",
                "object": "1",
                "string": "1"
            },
            "join": {
                "custom-glue": "1|2|3",
                "default": "123",
                "object": "[object Object], [object Object], [object Object]"
            },
            "last": {
                "array-as-variable": "4",
                "array": "4",
                "object": "4",
                "string": "4"
            },
            "length": {
                "array": "4",
                "number": "0",
                "object": "4",
                "string": "4"
            },
            "lower": {
                "array": "my first car,my Second car,my THIRD car",
                "number": "5",
                "string": "my first car"
            },
            "replace": {
                "count": "aaabbbccc",
                "empty": "aaabbbccc",
                "letter": "aaabbbccc",
                "pattern": "aaabbbccc"
            },
            "reverse": {
                "array": "4\n3\n2\n1\n",
                "object-default": "3: c\n2: b\n1: a\n",
                "object-preserve-keys": "3: c\n2: b\n1: a\n",
                "string": "4321"
            },
            "round": {
                "ceil": "42.5",
                "common": "42.6",
                "default": "43",
                "floor": "42.5",
                "precision": "42.6"
            },
            "upper": {
                "array": "my first car,my Second car,my THIRD car",
                "number": "5",
                "string": "MY FIRST CAR"
            }
        },
        "functions": {
            "attribute": {
                "array": "charlie",
                "object": "alpha"
            },
            "cycle": {
                "2-items": "even\nodd\neven\nodd\neven\n",
                "3-items": "orange\nbanana\napple\norange\nbanana\n"
            },
            "max": {
                "array": "3",
                "object": "e",
                "sequence": "3"
            },
            "min": {
                "array": "1",
                "object": "a",
                "sequence": "1"
            },
            "range": {
                "dot-dot-operator": "5 6 7 8 9 10 ",
                "float-step": "5 7.5 10 ",
                "negative-start": "-5 -4 -3 -2 -1 0 1 2 3 4 5 ",
                "start-stop-step": "5 7 9 ",
                "start-stop": "5 6 7 8 9 10 ",
                "stop": "10 9 8 7 6 5 4 3 2 1 0 "
            }
        },
        "tags": {
            "if": {
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if im_broken }still work",
                "comment": "{# test",
                "multiline": "\n{{ varX }}\nvalue Y\n{{ varZ }}",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            },
            "spaceless": {
                "attributes": "<input name=\" spaceless \"  value=\"  \"  required=\"  \">",
                "div": "<div><strong>test</strong></div>",
                "pre": "<pre>\nFormatted text\n\n<strong>with empty lines\n    and tabs</strong></pre>",
                "textarea": "<textarea>\nFormatted text\n\n<strong>with empty lines\n    and tabs</strong></textarea>"
            },
            "verbatim": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if im_broken }still work",
                "comment": "{# test",
                "multiline": "\n{{ varX }}\nvalue Y\n{{ varZ }}",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    }
}